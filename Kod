//-mwindows -lgdi32
#include<windows.h>
#include<stdio.h>
#include<stdlib.h>
#include<time.h>
#include<math.h>
#define BROJ_TASTERA 20
int O,M,T=0,BrojBodova =0,U=-1,igrac=1,jezik=0;void* ObojenEkran;bool programRadi=1;LARGE_INTEGER pocetak_kadra,kraj_kadra,brzinaucitavanja;bool stanjeTastera[BROJ_TASTERA][2];double vreme_po_kadru=0.1,vreme_za_crtanje=0,aplikaciono_vreme=0;BITMAPINFO E;int G(int l,int o,int r) {if(o<l)return l;if(o>r)return r;return o;}void ObojiKvadrat(int x0,int y0,int x1,int y1,unsigned int c) {if(x0>O||x1<0||y0>M||y1<0||vreme_za_crtanje!=0) {} else {x0=G(0,x0,O);x1=G(0,x1,O);y0=G(0,y0,M);y1=G(0,y1,M);for(int y=y0; y<y1; y++) {unsigned int* r=(unsigned int*)ObojenEkran+x0+y*O;for(int x=x0; x<x1; x++) {if(*r!=c)*r=c;r++;}}}}void K(int x,int y,int e,unsigned int c) {for(int t=y-e; t<=y+e; t++)for(int v=x-e; v<=x+e; v++)if((t-y)*(t-y)+(v-x)*(v-x)<=e*e)if(!(v-1<0||v+1>O||t-1<0||t+1>M))ObojiKvadrat(v,t,v+1,t+1,c);}void TransformisiUKoordinateEkrana(double *x,double *y,double *h,double *H) {*x*=O*0.01;*y*=M*0.01;*h*=O*0.01;*H*=M*0.01;ceil(*h);ceil(*H);}void eL(int x,int y,int a,int b,unsigned int c) {for(int t=y-b; t<=y+b; t++)for(int v=x-a; v<=x+a; v++)if(((v-x)*(v-x)*(b*b)+(t-y)*(t-y)*(a*a))<=(b*b)*(a*a)) if(!(v-1<0||v+1>O||t-1<0||t+1>M))ObojiKvadrat(v,t,v+1,t+1,c);}void Pv(int x1,int y1,int x2,int y2,int d,unsigned int c) {int dx=abs(x2-x1);int dy=abs(y2-y1);int sx=x1<x2 ? 1 : -1;int sy=y1<y2 ? 1 : -1;int err=dx-dy;int e2;while (x1 != x2||y1 != y2) {K(x1,y1,d/2,c);e2=2*err;if (e2>-dy) {err -= dy;x1 += sx;}if (e2<dx) {err += dx;y1 += sy;}}}void PV(double x1,double y1,double x2,double y2,double d,unsigned int c) {TransformisiUKoordinateEkrana(&x1,&y1,&x2,&y2);if(O>M)d*=M*0.01;else d*=O*0.01;Pv((int)x1,(int)y1,(int)x2,(int)y2,(int)d,c);}void El(double x,double y,double a,double b,unsigned int c) {TransformisiUKoordinateEkrana(&x,&y,&a,&b);double o=a;if(a>b)o=b;K((int)x,(int)y,(int)o,c);}bool PritisnutTaster(int b) {return stanjeTastera[b][0]&&stanjeTastera[b][1];}bool PD(int b) {return !stanjeTastera[b][0]&&stanjeTastera[b][1];}void EL(double x,double y,double a,double b,unsigned int c) {TransformisiUKoordinateEkrana(&x,&y,&a,&b);eL((int)x,(int)y,(int)round(a),(int)round(b),c);}void CA(double x,double y,double h,double H,unsigned int c) {TransformisiUKoordinateEkrana(&x,&y,&h,&H);ObojiKvadrat(x,y,x+h,y+H,c);}void OB(double r,double o,double x,double y,double d,unsigned int c) {CA(r,o,d,y-o,c);CA(r,o,x-r,d,c);CA(x-d,o,d,y-o,c);CA(r,y-d,x-r,d,c);}void OL(double r,double o,double x,double y,unsigned int c) {double g=(x-r<=y-o)?x-r:y-o;g*=0.04;CA(r+g/2,o+g/2,x-r-g,y-o-g,c);PV(r+g/2,o+g/2,r+g/2,y-g/2,g,c);PV(r+g/2,o+g/2,x-g/2,o+g/2,g,c);PV(x-g/2,o+g/2,x-g/2,y-g/2,g,c);PV(r+g/2,y-g/2,x-g/2,y-g/2,g,c);}void Cu(double x,double y,double x1,double x2,int c) {ObojiKvadrat(x,y,x+x1,y+x2,c);}void JA(double x,double y,double h,double H,unsigned int c) {TransformisiUKoordinateEkrana(&x,&y,&h,&H);y+=6*H;ObojiKvadrat(x,y,x+h,y+H,c);}bool me(float a,float b,float c) {return a>=b&&a<=c;}bool MisUKvadratu(float a,float b,float d,float r,HWND h) {POINT mis;GetCursorPos(&mis);ScreenToClient(h,&mis);float v=100.0*mis.x/O,l=100-100.0*mis.y/M;return me(v,a,d)&&me(l,b,r);}void Ca(double x,double y,double h,double H,unsigned int c,unsigned int g,HWND G) {unsigned int o=MisUKvadratu(x,y,x+h,y+H,G)?g:c;x*=O*0.01;y*=M*0.01;h*=O*0.01;H*=M*0.01;ObojiKvadrat(x,y,x+h,y+H,o);}void CO(double x,double y,double h,double H,unsigned int c,unsigned int g,HWND G) {unsigned int o=MisUKvadratu(x,y,x+h,y+H,G)?g:c;OL(x,y,x+h,y+H,o);}void Co(double x,double y,double h,double H,unsigned int c) {OL(x,y,x+h,y+H,c);}const char* Znakovi[][7]= {" 00","0  0","0  0","0  0","0  0","0  0"," 00","  0 "," 00 ","  0 ","  0 ","  0 ","  0 "," 000"," 00 ","0  0","   0","  0 "," 0  ","0   ","0000","000 ","   0","   0"," 00 ","   0","   0","000 ","  0 "," 00 ","0 0 ","0 0 ","0000","  0 ","  0 ","0000","0   ","0   ","000 ","   0","   0","000 "," 00 ","0   ","0   ","000 ","0  0","0  0"," 00 ","0000","   0","  0 ","  0 "," 0  "," 0  "," 0  "," 00 ","0  0","0  0"," 00 ","0  0","0  0"," 00 "," 00 ","0  0","0  0"," 000","   0","   0"," 00 "," 00","0  0","0  0","0000","0  0","0  0","0  0","0000","0","0","000","0  0","0  0","000","0  0","0  0","0  0"," 000","   0","   0","   0"," 000"," 0 0"," 0 0"," 0 0","00000","0   0","0   0","0000","0","0","000","0","0","0000","  0"," 000","0 0 0","00000","0 0 0"," 000","  0"," 000","0","0","0","0","0","0","0   0","0   0"," 0 0","  0"," 0 0","0   0","0   0","0  00","0  00","0 0 0","0 0 0","0 0 0","00  0","00  0","   0","   0","   0","   0","0  0","0  0"," 000","0  0","0  0","0 0","00","0 0","0  0","0  0"," 0000"," 0  0"," 0  0"," 0  0"," 0  0","0   0","0   0","00 00","0 0 0","0 0 0","0   0","0   0","0   0","0   0","0  0","0  0","0  0","0000","0  0","0  0","0  0","0000","0  0","0  0","0  0","0  0","0  0","0000","00000","0   0","0   0","0   0","0   0","0   0","0   0","0  0","0  0","0  0","0  0","0  0","00000","    0","000","0  0","0  0","000","0   ","0   ","0   "," 000","0","0","0","0","0"," 000 ","00000","  0","  0","  0","  0","  0","  0","0   0","0   0","0   0"," 0 0","  0"," 0","0","00","0 0","0 0","000","0  0","0  0","000","0 0 0","0 0 0"," 000"," 000"," 000","0 0 0","0 0 0","0  0","0  0","0  0","0000","0  0","0  00","0  00","0000","0","0","000","0  0","0  0","0  0"," 00 ","0  0","   0","  0","   0","0  0"," 00","","  0","   0","00000","   0","  0 ","","","  0"," 0","00000"," 0","  0 ","","","",""," 000","","","","","  0"," 000","0 0 0","  0","  0 ","","","  0","  0","0 0 0"," 000","  0 ","","0000","0","0","000","0  0","0  0","0 00","0 0 0","0 0 0","0 0 0","0 0 0","0 0 0","0 0 0","00000"," 000"," 0 0"," 0 0"," 0 0"," 0 0"," 0 00","0  00",};void TE(const char *H,double x,double y,double S,int c) {double pj=y;while(*H) {if(*H!=32) {const char** sL;if(*H<48) {sL=Znakovi[']'-'A'+10];x-=4*S;} else if(*H==93)sL=Znakovi[']'-'A'+12];else if(*H<65)sL=Znakovi[*H-'0'];else sL=Znakovi[*H-'A'+10];double oj=x;for(int i=0; i<7; i++) {const char* rE=sL[i];while(*rE) {if(*rE=='0')JA(x,y,S,S,c);x+=S;rE++;}y-=S;x=oj;}}H++;x+=S*6.f;y=pj;}}void BR(int e,double x,double y,double S,int c) {if(e<0) {e*=-1;TE("-",x,y,S,c);x-=2*S;}int u=e%10;while(e>=0) {switch(u) {case 0:TE("0",x,y,S,c);break;case 1:TE("1",x,y,S,c);break;case 2:TE("2",x,y,S,c);break;case 3:TE("3",x,y,S,c);break;case 4:TE("4",x,y,S,c);break;case 5:TE("5",x,y,S,c);break;case 6:TE("6",x,y,S,c);break;case 7:TE("7",x,y,S,c);break;case 8:TE("8",x,y,S,c);break;case 9:TE("9",x,y,S,c);break;}x-=4*S;e=e/10;if(e==0)e=-1;u=e%10;}}void Te(int a,double x,double y,double S,int c) {char s[20];TE((sprintf(s,"%d",a),s),x,y,S,c);}void Kraj() {Co(40,40,20,20,0x777777);Co(40,35,8,4,0x999999);TE("R - OPET",41,37,0.14,0xCA2406);Co(52,35,8,4,0x999999);TE("N - NAZAD",52.5,37,0.14,0xCA2406);if(T==43)TE("NERESENO",41,55,0.3,0xCA2406);else if(T==42) {TE("POBEDA ZA",41,55,0.3,0xCA2406);Te((igrac==1?2:1),41,50,0.3,(igrac==1?0xaa6272:0xe0a020));TE("IGRACA",44,50,0.3,0xCA2406);} else if(T%10==2) {TE("IZGUBIO SI",41,55,0.3,0xCA2406);if(T/10!=2)Te(BrojBodova ,45,50,0.5,0xffffff);} else {TE("POBEDA",44,55,0.3,0xCA2406);Te(BrojBodova ,48,50,0.5,0xffffff);}}
#define Sirina_table_za_Zmiju 24
#define Visina_table_za_Zmiju 17
int Tabla_za_Zmiju[Visina_table_za_Zmiju][Sirina_table_za_Zmiju];unsigned int Zmija[2],novi_smer_zmije=1,smer_zmije =1,zD=3;void InicijalizacijaZmije() {for(int y=0; y<Visina_table_za_Zmiju; y++) {for(int x=0; x<Sirina_table_za_Zmiju; x++) {Tabla_za_Zmiju[y][x]=0;}}Tabla_za_Zmiju[5][5]=3;Tabla_za_Zmiju[5][4]=2;Tabla_za_Zmiju[5][3]=1;Zmija[0]=5;Zmija[1]=5;zD=3;novi_smer_zmije=0;smer_zmije =0;}void postavihranu() {if(zD==Visina_table_za_Zmiju*Sirina_table_za_Zmiju)return;int x=0,y=0;do {x=rand()%Sirina_table_za_Zmiju;y=rand()%Visina_table_za_Zmiju;} while(Tabla_za_Zmiju[y][x]!=0);Tabla_za_Zmiju[y][x]=-1;}bool pomeri_zmiju() {int dx=0,dy=0;smer_zmije =novi_smer_zmije;if(smer_zmije ==0)dx=1;else if(smer_zmije ==1)dx=-1;else if(smer_zmije ==2)dy=1;else if(smer_zmije ==3)dy=-1;int novoX=Zmija[0]+dx,novoY=Zmija[1]+dy;if(novoX<0||novoX>=Sirina_table_za_Zmiju||novoY<0||novoY>=Visina_table_za_Zmiju)return false;if(Tabla_za_Zmiju[novoY][novoX]>0)return false;bool j=Tabla_za_Zmiju[novoY][novoX] == -1;Zmija[0]=novoX;Zmija[1]=novoY;zD+=j?1:0;BrojBodova +=j?1:0;if(!j)for(int y=0; y<Visina_table_za_Zmiju; y++) {for(int x=0; x<Sirina_table_za_Zmiju; x++) {if(Tabla_za_Zmiju[y][x]>0) {Tabla_za_Zmiju[y][x]--;}}}else postavihranu();Tabla_za_Zmiju[Zmija[1]][Zmija[0]]=zD;return true;}void zS(int x) {if((smer_zmije ==0&&x==1)||(smer_zmije ==1&&x==0)||(smer_zmije ==2&&x==3)||(smer_zmije ==3&&x==2))return;novi_smer_zmije=x;}
#define DuzinaMiskogPolja 8
#define SirinaMiskogPolja 8
#define BROJMINA 12
int mine[DuzinaMiskogPolja][SirinaMiskogPolja];unsigned int broj_otvorenih_polja=0,broj_zastava=0;bool zastave[DuzinaMiskogPolja][SirinaMiskogPolja]= {0},vidjiv[DuzinaMiskogPolja][SirinaMiskogPolja]= {0};int vrednost_pritisnutog_polja() {return mine[U/SirinaMiskogPolja][U%SirinaMiskogPolja];}void postavi_vrednost_pritisnutog_polja(bool a) {vidjiv[U/SirinaMiskogPolja][U%SirinaMiskogPolja]=a;}void ucitaj_minolovac() {broj_otvorenih_polja=0;broj_zastava=0;for (int i = 0; i < DuzinaMiskogPolja; i++)for (int j = 0; j < SirinaMiskogPolja; j++) {zastave[i][j]=0;mine[i][j] = 0;vidjiv[i][j] = 0;}}void postaviMine() {int placed=0;while(placed<BROJMINA) {int x = rand() % SirinaMiskogPolja;int y = rand() % DuzinaMiskogPolja;if(mine[y][x]!=-1&&!vidjiv[y][x]) {mine[y][x] = -1;placed++;}}}void odrediBrojSusednihMina() {for (int i = 0; i < DuzinaMiskogPolja; i++) {for (int j = 0; j < SirinaMiskogPolja; j++) {if (mine[i][j]  ==  -1)continue;int count = 0;for (int dx = -1; dx <= 1; dx++) {for (int dy = -1; dy <= 1; dy++) {int ni = i + dx,nj = j + dy;if (ni >= 0 && ni < DuzinaMiskogPolja && nj >= 0 && nj < SirinaMiskogPolja && mine[ni][nj]  ==  -1)count++;}}mine[i][j] = count;}}}void OtvoriPolje(int x,int y) {if (x < 0 || x >= SirinaMiskogPolja || y < 0 || y >= DuzinaMiskogPolja || vidjiv[y][x])return;vidjiv[y][x] = 1;broj_otvorenih_polja+=1;if (mine[y][x]  ==  0) {for (int dx = -1; dx <= 1; dx++)for (int dy = -1; dy <= 1; dy++)if (dx != 0 || dy != 0)OtvoriPolje(x + dx, y + dy);}}
#define VisinaSveta 20
#define SirinaSveta 20
int svet[VisinaSveta][SirinaSveta] = {0},VremePoGeneraciji=-1;void Inicijalizacija_Konvejeve_Igre_Zivota() {for (int i = 0; i < VisinaSveta; i++)for (int j = 0; j < SirinaSveta; j++)svet[i][j] =0;}int broj_komsija(int x, int y) {int suma = 0;for (int i = -1; i <= 1; i++) {for (int j = -1; j <= 1; j++) {if (i  ==  0 && j  ==  0) continue;int ni = x + i,nj = y + j;if (ni >= 0 && ni < VisinaSveta && nj >= 0 && nj < SirinaSveta)suma += (svet[ni][nj]==1);}}return suma;}void sledeca_generacija() {int novo[VisinaSveta][SirinaSveta] = {0};for (int i = 0; i < VisinaSveta; i++) {for (int j = 0; j < SirinaSveta; j++) {int komsije = broj_komsija(i, j);if (svet[i][j]==1 && (komsije  ==  2 || komsije  ==  3))novo[i][j] = 1;else if (svet[i][j]<1 && komsije  ==  3)novo[i][j] = 1;else if(svet[i][j]<0)novo[i][j] = svet[i][j]+1;else if(svet[i][j]==1&&novo[i][j]==0)novo[i][j] = -10;}}for (int i = 0; i < VisinaSveta; i++)for (int j = 0; j < SirinaSveta; j++)svet[i][j] = novo[i][j];}
#define RED 6
#define KOL 7
unsigned int istorija[RED*KOL][RED][KOL] = {0},brojpoteza =0,tabla[RED][KOL] = {0},rezimIstorije=0;void istor() {memcpy(istorija[brojpoteza ],tabla,sizeof(tabla));brojpoteza ++;}void Inicijalizacija_Povezi4() {rezimIstorije=0;igrac=1;for (int k = 0; k < RED*KOL; k++) {for (int i = 0; i < RED; i++) {for (int j = 0; j < KOL ; j++) {istorija[k][i][j]=0;}}}for (int i = 0; i < RED; i++)for (int j = 0; j < KOL ; j++)tabla[i][j]=0;}int ubaci_u_kolonu(int kolona) {for (int i = 0; i <= RED - 1; i++) {if (tabla[i][kolona]  ==  0) {tabla[i][kolona] = igrac;istor();return i;}}return -1;}int proveri_pobedu() {for (int i = 0; i < RED; i++)for (int j = 0; j < KOL - 3; j++)if (tabla[i][j]  ==  igrac && tabla[i][j+1]  ==  igrac &&tabla[i][j+2]  ==  igrac && tabla[i][j+3]  ==  igrac)return 1;for (int j = 0; j < KOL; j++)for (int i = 0; i < RED - 3; i++)if (tabla[i][j]  ==  igrac && tabla[i+1][j]  ==  igrac &&tabla[i+2][j]  ==  igrac && tabla[i+3][j]  ==  igrac)return 1;for (int i = 3; i < RED; i++)for (int j = 0; j < KOL - 3; j++)if (tabla[i][j]  ==  igrac && tabla[i-1][j+1]  ==  igrac &&tabla[i-2][j+2]  ==  igrac && tabla[i-3][j+3]  ==  igrac)return 1;for (int i = 3; i < RED; i++)for (int j = 3; j < KOL; j++)if (tabla[i][j]  ==  igrac && tabla[i-1][j-1]  ==  igrac &&tabla[i-2][j-2]  ==  igrac && tabla[i-3][j-3]  ==  igrac)return 1;return 0;}
#define Velicina2048 4
int Tabela2048[Velicina2048][Velicina2048];void dodaj_nasum() {int empty_count = 0;for (int i = 0; i < Velicina2048; i++)for (int j = 0; j < Velicina2048; j++)if (Tabela2048[i][j]  ==  0)empty_count++;if (empty_count  ==  0)return;int r = rand() % empty_count;int k = 0;for (int i = 0; i < Velicina2048; i++) {for (int j = 0; j < Velicina2048; j++) {if (Tabela2048[i][j]  ==  0) {if (k  ==  r) {Tabela2048[i][j] = (rand() % 10  ==  0) ? 4 : 2;return;}k++;}}}}void inicijalizacija2048() {for (int i = 0; i < Velicina2048; i++)for (int j = 0; j < Velicina2048; j++)Tabela2048[i][j] = 0;dodaj_nasum();dodaj_nasum();}void spajanje(int row[Velicina2048]) {int tren[Velicina2048] = {0}, index = 0;for (int i = 0; i < Velicina2048; i++)if (row[i] != 0)tren[index++] = row[i];for (int i = 0; i < Velicina2048 - 1; i++) {if (tren[i] != 0 && tren[i]  ==  tren[i + 1]) {tren[i] *= 2;BrojBodova +=tren[i];tren[i + 1] = 0;}}int final[Velicina2048] = {0};index = 0;for (int i = 0; i < Velicina2048; i++)if (tren[i] != 0)final[index++] = tren[i];for (int i = 0; i < Velicina2048; i++)row[i] = final[i];}bool redjenak(int a[Velicina2048], int b[Velicina2048]) {for (int i = 0; i < Velicina2048; i++) {if (a[i] != b[i]) return 0;}return 1;}bool tabljednak(int a[Velicina2048][Velicina2048], int b[Velicina2048][Velicina2048]) {for (int i = 0; i < Velicina2048; i++) {for (int j = 0; j < Velicina2048; j++) {if (a[i][j] != b[i][j]) return 0;}}return 1;}void pomeri_ulevo() {int star[Velicina2048][Velicina2048];memcpy(star, Tabela2048, sizeof(Tabela2048));for (int i = 0; i < Velicina2048; i++) {spajanje(Tabela2048[i]);}if (!tabljednak(star, Tabela2048)) {dodaj_nasum();} else {memcpy(Tabela2048, star, sizeof(Tabela2048));}}void pomeri_udesno() {int star[Velicina2048][Velicina2048];memcpy(star, Tabela2048, sizeof(Tabela2048));for (int i = 0; i < Velicina2048; i++) {int tren[Velicina2048];for (int j = 0; j < Velicina2048; j++)tren[j] = Tabela2048[i][Velicina2048 - 1 - j];spajanje(tren);for (int j = 0; j < Velicina2048; j++)Tabela2048[i][Velicina2048 - 1 - j] = tren[j];}if (!tabljednak(star, Tabela2048)) {dodaj_nasum();} else {memcpy(Tabela2048, star, sizeof(Tabela2048));}}void pomeri_nagore() {int star[Velicina2048][Velicina2048];memcpy(star, Tabela2048, sizeof(Tabela2048));for (int j = 0; j < Velicina2048; j++) {int kol[Velicina2048];for (int i = 0; i < Velicina2048; i++)kol[i] = Tabela2048[i][j];spajanje(kol);for (int i = 0; i < Velicina2048; i++)Tabela2048[i][j] = kol[i];}if (!tabljednak(star, Tabela2048)) {dodaj_nasum();} else {memcpy(Tabela2048, star, sizeof(Tabela2048));}}void pomeri_nadole() {int star[Velicina2048][Velicina2048];memcpy(star, Tabela2048, sizeof(Tabela2048));for (int j = 0; j < Velicina2048; j++) {int kol[Velicina2048];for (int i = 0; i < Velicina2048; i++)kol[i] = Tabela2048[Velicina2048 - 1 - i][j];spajanje(kol);for (int i = 0; i < Velicina2048; i++)Tabela2048[Velicina2048 - 1 - i][j] = kol[i];}if (!tabljednak(star, Tabela2048)) {dodaj_nasum();} else {memcpy(Tabela2048, star, sizeof(Tabela2048));}}bool DaLiJeKraj2048() {for (int i = 0; i < Velicina2048; i++) {for (int j = 0; j < Velicina2048; j++) {if (!Tabela2048[i][j]||(i < Velicina2048 - 1 && Tabela2048[i][j]  ==  Tabela2048[i + 1][j])||(j < Velicina2048 - 1 && Tabela2048[i][j]  ==  Tabela2048[i][j + 1])) return 1;}}return 0;}
#define TetrisVisina 20
#define TetrisSirina 10
double tetris_ubrzanje=0;unsigned int tat[TetrisVisina][TetrisSirina]= {0},trenutna_matrica[4][4],zadrzana_figura[4][4];int zadrzani_oblik = -1;int trenutni_oblik,xT = 3, yT = 0;bool zadrzana=0;void kopiraj_u_zadrzanu() {memcpy(zadrzana_figura, trenutna_matrica, sizeof(trenutna_matrica));}void kopiraj_iz_zadrzane() {memcpy(trenutna_matrica, zadrzana_figura, sizeof(zadrzana_figura));}int oblici[][4][4] = {{{0,0,0,0},{1,1,1,1},{0,0,0,0},{0,0,0,0}},{{1,1,0,0},{1,1,0,0},{0,0,0,0},{0,0,0,0}},{{0,1,0,0},{1,1,1,0},{0,0,0,0},{0,0,0,0}},{{0,1,1,0},{1,1,0,0},{0,0,0,0},{0,0,0,0}},{{1,1,0,0},{0,1,1,0},{0,0,0,0},{0,0,0,0}},{{1,0,0,0},{1,1,1,0},{0,0,0,0},{0,0,0,0}},{{0,0,1,0},{1,1,1,0},{0,0,0,0},{0,0,0,0}}};void osvezi_trenutni_oblik_u_tabli() {for (int i = 0; i < TetrisVisina; i++)for (int j = 0; j < TetrisSirina; j++)if (tat[i][j]  ==  2)tat[i][j] = 0;for (int i = 0; i < 4; i++)for (int j = 0; j < 4; j++)if (trenutna_matrica[i][j]) {int ny = yT + i;int nx = xT + j;if (ny >= 0 && ny < TetrisVisina && nx >= 0 && nx < TetrisSirina)tat[ny][nx] = 2;}}void kopiraj_oblik_u_trenutni(int oblik_id) {trenutni_oblik = rand() % (sizeof(oblici) / sizeof(oblici[0]));for (int i = 0; i < 4; i++)for (int j = 0; j < 4; j++)trenutna_matrica[i][j] = oblici[oblik_id][i][j];}void InicijalizacijaTetrisa() {zadrzana=0;zadrzani_oblik = -1;for (int y = 0; y < 4; y++)for (int x = 0; x<4; x++)zadrzana_figura[y][x]=0;tetris_ubrzanje=0.00;kopiraj_oblik_u_trenutni(trenutni_oblik);xT = 3;yT = 0;for (int i = 0; i < TetrisVisina; i++) for (int j = 0; j < TetrisSirina; j++) tat[i][j]=0;osvezi_trenutni_oblik_u_tabli();}int sudar(int dx, int dy) {for (int i = 0; i < 4; i++)for (int j = 0; j < 4; j++)if (trenutna_matrica[i][j]) {int nx = xT + j + dx;int ny = yT + i + dy;if (nx < 0 || nx >= TetrisSirina || ny >= TetrisVisina)return 1;if (ny >= 0 && tat[ny][nx]  ==  1)return 1;}return 0;}void stavi_na_tablu() {zadrzana=0;for (int i = 0; i < TetrisVisina; i++)for (int j = 0; j < TetrisSirina; j++)if (tat[i][j]  ==  2)tat[i][j] = 1;}void obrisi_redove() {int r=0;for (int i = 0; i < TetrisVisina; i++) {int pun = 1;for (int j = 0; j < TetrisSirina; j++) {if (tat[i][j] != 1) {pun = 0;break;}}if (pun) {r+=1;BrojBodova +=r*100;for (int k = i; k > 0; k--)for (int j = 0; j < TetrisSirina; j++)tat[k][j] = tat[k - 1][j];for (int j = 0; j < TetrisSirina; j++)tat[0][j] = 0;}}}void rotiraj() {int novi[4][4] = {0};for (int i = 0; i < 4; i++)for (int j = 0; j < 4; j++)novi[j][3 - i] = trenutna_matrica[i][j];int star[4][4];for (int i = 0; i < 4; i++)for (int j = 0; j < 4; j++)star[i][j] = trenutna_matrica[i][j];for (int i = 0; i < 4; i++)for (int j = 0; j < 4; j++)trenutna_matrica[i][j] = novi[i][j];if (sudar(0, 0)) {for (int i = 0; i < 4; i++)for (int j = 0; j < 4; j++)trenutna_matrica[i][j] = star[i][j];}}void spusti_odjednom() {while (!sudar(0, 1)) {yT++;BrojBodova +=2;}osvezi_trenutni_oblik_u_tabli();stavi_na_tablu();obrisi_redove();xT = 3;yT = 0;kopiraj_oblik_u_trenutni(trenutni_oblik);osvezi_trenutni_oblik_u_tabli();}void zameniZadrzanOblik() {int temp_oblik = trenutni_oblik;int temp_matrica[4][4];memcpy(temp_matrica, trenutna_matrica, sizeof(trenutna_matrica));kopiraj_iz_zadrzane();trenutni_oblik = zadrzani_oblik;memcpy(zadrzana_figura, temp_matrica, sizeof(temp_matrica));zadrzani_oblik = temp_oblik;}void zadrzi_figuru() {if (zadrzana) return;if (zadrzani_oblik == -1) {kopiraj_u_zadrzanu();zadrzani_oblik = trenutni_oblik;xT = 3;yT = 0;trenutni_oblik = rand() % (sizeof(oblici) / sizeof(oblici[0]));kopiraj_oblik_u_trenutni(trenutni_oblik);} else {zameniZadrzanOblik();if(sudar(0,0)) {zameniZadrzanOblik();}}zadrzana =1;osvezi_trenutni_oblik_u_tabli();}
#define JEZICI 2
#define KATEGORIJE 5
#define DUZINA 125
char aplikacije[][JEZICI][KATEGORIJE][DUZINA]= {{{"ZMIJA","IGRA U KOJOJ ZMIJA RASTE JEDEYI PECURKE", "\\ [ ^ ] ZA KRETAXE", "N JE UVEK NAZAD A R OPET"}},{{"MINOLOVAQ", "PRONA`I MINE BEZ DA EKSPLODIRAa", "LEVI I DESNI ZA LOVbEXE", "NEMOJ DA PRITISNEa ESQ"}},{{"KONVEJ", "SIMULAQIJA YELIJSKOG WIVOTA I KONTROLE POPULAQIJE", "RAZMAK ZA NOVU GENERAQIJU", "TEaKA FILOZOFIJA PROTIV SAMAQA"}},{{"POVEWI 4", "UBAQI WETON DA POVEWEa 4 U NIZU", "MIa ZA UBAQIVAXE I \\ [ ZA ISTORIJU", "VOLIM VLADU DARKA I DALIBORA"}},{{"2048", "SPOJI ISTE BROJEVE DA DO`Ea DO 2048", "\\ [ ^ ] ZA POMERAXE", "NAJACI MATURSKI"}},{{"TETRIS", "SLAGAXE BLOKOVA DA SE POPUNE REDOVI", "\\ [ ^ ] ZA POMERAXE I G ZA CUVAXE", "REALNO STARI JE BObI"}},};void obrn(char *str) {int len = strlen(str);for (int i = 0; i < len/2; i++) {char tmp = str[i];str[i] = str[len - 1 - i];str[len - 1 - i] = tmp;}}void popuniDrugiJezik() {int IGRE = sizeof(aplikacije) / sizeof(aplikacije[0]);for (int i = 0; i < IGRE; i++) {for (int j = 0; j < KATEGORIJE; j++) {strcpy(aplikacije[i][1][j], aplikacije[i][0][j]);obrn(aplikacije[i][1][j]);}}}void PrikaziOpis(unsigned int Opis) {TE(aplikacije[Opis][jezik][1],30,13,0.22,0xff5555);TE(aplikacije[Opis][jezik][2],30,10,0.19,0xff5555);TE(aplikacije[Opis][jezik][3],30,7,0.14,0xff5555);}void prikazi_aplikaciju(double x,double y,double c,double C,int i,HWND h) {if(MisUKvadratu(x,y,x+c,y+C,h)&&PritisnutTaster(6))T=i*10+10;if(MisUKvadratu(x,y,x+c,y+C,h))PrikaziOpis(i);CO(x,y,c,C,0xFD9C09,0xE13304,h);TE(aplikacije[i][jezik][0],x+c/10,y+c/40,c/100,0xCA2406);}void prikazi_aplikacije(double minX, double maxX, double minY, double maxY,HWND h) {int broj_igrica=sizeof(aplikacije) / sizeof(aplikacije[0]);if (broj_igrica <= 0) return;int najbolji_kol = 1,najbolji_red = broj_igrica;double najbolja_velicina = 0.0;for (int kol = 1; kol <= broj_igrica; ++kol) {int red = (broj_igrica + kol - 1) / kol;double raspoloziva_sirina = maxX - minX;double raspoloziva_visina = maxY - minY;double razmak = 1.0;double velicinaX = raspoloziva_sirina / kol * 0.9;double velicinaY = raspoloziva_visina / red * 0.9;double velicina = velicinaX < velicinaY ? velicinaX : velicinaY;if (velicina > najbolja_velicina) {najbolja_velicina = velicina;najbolji_kol = kol;najbolji_red = red;}}double velicinaX = najbolja_velicina;double velicinaY = najbolja_velicina;double ukupna_sirina = najbolji_kol * velicinaX;double ukupna_visina = najbolji_red * velicinaY;double razmakX = ((maxX - minX) - ukupna_sirina) / (najbolji_kol + 1);double razmakY = ((maxY - minY) - ukupna_visina) / (najbolji_red + 1);int index = 0;for (int red = 0; red < najbolji_red; ++red) {int kolone_u_redu = najbolji_kol;if (red  ==  najbolji_red - 1 && broj_igrica % najbolji_kol != 0) {kolone_u_redu = broj_igrica % najbolji_kol;}double offsetX = (maxX - minX - (kolone_u_redu * velicinaX + (kolone_u_redu + 1) * razmakX)) / 2.0;for (int kol = 0; kol < kolone_u_redu; ++kol) {if (index >= broj_igrica) break;double x = minX + offsetX + razmakX + kol * (velicinaX + razmakX);double y = minY + razmakY + (najbolji_red - red - 1) * (velicinaY + razmakY);prikazi_aplikaciju(x, y, velicinaX, velicinaY,red * najbolji_kol + kol,h);++index;}}}void OsveziEkran(HWND h,bool CG) {if(vreme_za_crtanje>0.016)vreme_za_crtanje=0;ObojiKvadrat(0,0,O,M,0x0E203D);OB(0,0,100,100,1,0x3773D2);if(MisUKvadratu(93,93,98,98,h)&&PritisnutTaster(6))PostMessage(h,WM_CLOSE,0,0);Ca(93,93,5,5,0x09203D,0x05201D,h);PV(93,93,98,98,1,0xff0000+0xFD9C09*MisUKvadratu(93,93,98,98,h));PV(93,98,98,93,1,0xff0000+0xFD9C09*MisUKvadratu(93,93,98,98,h));if(T==0) {Ca(88,93,5,5,0x444444,0xaa201D,h);if(jezik==0)TE("SR" ,88,93,0.46,0xff9999);else TE("RS" ,88,93,0.46,0xff9999);if(MisUKvadratu(88,93,93,98,h)&&PritisnutTaster(6)) {if(jezik>=JEZICI-1)jezik=0;else jezik++;}prikazi_aplikacije(10,90,20,80,h);} else if(T/10==1) {float a=25,b=30,p=48.0/Sirina_table_za_Zmiju,v=42.5/Visina_table_za_Zmiju;Te(BrojBodova ,15,82,1,0xff9999);Co(a-2.5*p,b-2.5*v,Sirina_table_za_Zmiju*p+5*p,Visina_table_za_Zmiju*v+v*5,0xAC5B2C);for(int y=0; y<Visina_table_za_Zmiju; y++) {for(int x=0; x<Sirina_table_za_Zmiju; x++) {if(Tabla_za_Zmiju[y][x]>0) {CA(x*p+a,y*v+b,p+0.1,v,0x2327f8-(zD-Tabla_za_Zmiju[y][x])*0x7);if(Tabla_za_Zmiju[y][x]==zD) {unsigned int o=(T!=12)?0x0:0xff0000;if(novi_smer_zmije==3||novi_smer_zmije==0) {CA(x*p+p/5+a,y*v+b+4*v/5-0.1,p/5,v/5,o);}if(novi_smer_zmije==3||novi_smer_zmije==1) {CA(x*p+3*p/5+0.1+a,y*v+b+4*v/5-0.1,p/5,v/5,o);}if(novi_smer_zmije==2||novi_smer_zmije==0) {CA(x*p+p/5+a,y*v+b+v/5-0.1,p/5,v/5,o);}if(novi_smer_zmije==2||novi_smer_zmije==1) {CA(x*p+3*p/5+0.1+a,y*v+b+v/5-0.1,p/5,v/5,o);}}}if(Tabla_za_Zmiju[y][x]<1) {if((x+y%2)%2==0)CA(x*p+a,y*v+b,p+0.1,v,0x97E352);else CA(x*p+a,y*v+b,p+0.1,v,0x5A9E1A);}if(Tabla_za_Zmiju[y][x] == -1)El(x*p+a+p/2,y*v+b+v/2,p/2,v/2,0xCF1E1E);/*int e=Tabla_za_Zmiju[y][x];Te(e,x*p+a+p/4,y*v+b+v/4,0.2,0xff0000);*/}}if(T==12)Kraj();} else if(T/10==2) {U=-1;float a=25,b=25,p=52.0/SirinaMiskogPolja,v=52.0/DuzinaMiskogPolja;Te(BrojBodova,40,82,2,0xff0000);Te(BROJMINA-broj_zastava,10,52,0.4,0xffaaaa);Co(a-p/2,b-v/2,SirinaMiskogPolja*p+p,DuzinaMiskogPolja*v+v,0xAC5B2C);for (int y=0; y<DuzinaMiskogPolja; y++) {for(int x=0; x<SirinaMiskogPolja; x++) {if (vidjiv[y][x]) {int g=mine[y][x];if(g==-1) {T=22;CA(x*p+a,y*v+b,p+0.1,v,0xff9999);} else {CA(x*p+a,y*v+b,p+0.1,v,(x+y%2)%2==0?0x986838:0xBD854C);if(g) {unsigned int o=0x4AC0FD;if(g==2)o=0x388E3C;if(g==3)o=0xC73B40;if(g==4)o=0x7B1FA2;else if(g>4)o=0x7B1FA2;Te(g,x*p+a+p/4*1.5,y*v+b+v/4,p/13,o);}if(x>0)if(!vidjiv[y][x-1])CA(x*p+a,y*v+b,0.9,v,0x44E352);if(x<SirinaMiskogPolja-1)if(!vidjiv[y][x+1])CA(x*p+a+p-0.8,y*v+b,0.9,v,0x44E352);if(y>0)if(!vidjiv[y-1][x]) {float o=0,g=0;if(x>0)if(vidjiv[y-1][x-1]&&vidjiv[y][x-1]) {		o=0.8;		g=0.8;	}CA(x*p+a-o,y*v+b,p+g+0.1,0.8,0x44E352);}if(y<DuzinaMiskogPolja-1)if(!vidjiv[y+1][x]) {CA(x*p+a,y*v+b+v-0.8,p+0.1,0.8,0x44E352);}if(x>0&&y>0) {if(!vidjiv[y-1][x-1])CA(x*p+a,y*v+b,0.9,0.8,0x44E352);}if(x<SirinaMiskogPolja-1&&y<DuzinaMiskogPolja-1) {if(!vidjiv[y+1][x+1])CA(x*p+a+p-0.8,y*v+b+v-0.8,0.9,0.8,0x44E352);}if(x>0&&y<DuzinaMiskogPolja-1) {if(!vidjiv[y+1][x-1])CA(x*p+a,y*v+b+v-0.8,0.9,0.8,0x44E352);}}} else {Ca(x*p+a,y*v+b,p+0.1,v,(x+y%2)%2==0?0x97E352:0x5A9E1A,0x99,h);if(zastave[y][x])CA(x*p+a+p/4,y*v+b+v/4,p/2,v/2,0xaa0000);if(MisUKvadratu(x*p+a,y*v+b,x*p+a+p+0.1,y*v+b+v,h))U=y*SirinaMiskogPolja+x;}/*Te(mine[y][x],x*p+a+p/4*1.5,y*v+b+v/4,0.4,0xff0000);*/}}if(T==22||T==23)Kraj();if(T!=22&&broj_otvorenih_polja==DuzinaMiskogPolja*SirinaMiskogPolja-BROJMINA)T=23;} else if(T/10==3) {U=-1;float a=20,b=25,p=60.0/SirinaSveta,v=60.0/VisinaSveta;Co(a-p/2,b-v/2,SirinaSveta*p+p,VisinaSveta*v+v,0xaaaaaa);TE("\\",40,10,1,0xff9999-0x009999*MisUKvadratu(40,10,47,20,h));Te(VremePoGeneraciji>0?VremePoGeneraciji:0,VremePoGeneraciji>9?47.5:50,10,1,0xff9999);TE("[",60,10,1,0xff9999-0x009999*MisUKvadratu(60,10,67,20,h));if(MisUKvadratu(40,10,47,20,h)&&PritisnutTaster(6)&&VremePoGeneraciji>0) {if(VremePoGeneraciji==1)VremePoGeneraciji=-1;else VremePoGeneraciji--;}if(MisUKvadratu(60,10,67,20,h)&&PritisnutTaster(6)) {if(VremePoGeneraciji==-1)VremePoGeneraciji=1;else VremePoGeneraciji++;}for (int y=0; y<VisinaSveta; y++) {for (int x=0; x<SirinaSveta; x++) {unsigned int o=0x0;if(svet[y][x]<0)o+=-svet[y][x]*0x9;if(svet[y][x]==1)Ca(x*p+a,y*v+b,p+0.1,v,0xffffff,0x5500ff,h);else {Ca(x*p+a,y*v+b,p+0.1,v,o,0x99,h);}if(MisUKvadratu(x*p+a,y*v+b,x*p+a+p+0.1,y*v+b+v,h))U=y*SirinaSveta+x;}}} else if(T/10==4) {U=-1;float a=26,b=25,p=7,v=6.5;if(rezimIstorije) {TE("OVO JE POZIQIJA PRE ",10,77,0.3,0x999999);Te(rezimIstorije,10,67,0.3,0xff9999);TE("POTEZA",13,67,0.3,0x999999);}Co(a,b,KOL*p,RED*v,0x0);for (int x=0; x<KOL; x++)if(MisUKvadratu(x*p+a,b,x*p+a+p,b+6*v,h)&&T<42)CA(x*p+a,b,p,6*v,0xaaaaaa);for (int y=0; y<RED; y++) {for (int x=0; x<KOL; x++) {int rp=0;if(brojpoteza )rp=brojpoteza -1;if(rezimIstorije) {rp=brojpoteza -rezimIstorije-1;}if(istorija[rp][y][x])El(x*p+a+p/2,y*v+b+v/2,p/2,v/2,0xF6BB20-(istorija[rp][y][x]-1)*0xBB20);else El(x*p+a+p/2,y*v+b+v/2,p/2,v/2,0x888888);}for (int x=0; x<KOL; x++)if(MisUKvadratu(x*p+a,+b,x*p+a+p,b+6*v,h)) {for (int i = 0; i <= RED - 1; i++) {if (tabla[i][x] == 0&&!(T>41)&&!rezimIstorije) {El(x*p+a+p/2,i*v+b+v/2,p/2,v/2,igrac==1?0xe0a020:0xaa6272);U=i*KOL+x;break;}}}}if(T==42||T==43)Kraj();} else if(T/10==5) {U=-1;float a=25,b=25,p=50.0/Velicina2048,v=50.0/Velicina2048;Te(BrojBodova ,20,77,2,0x999999+BrojBodova);CA(a,b,p*Velicina2048,v*Velicina2048,0xBBADA0);for (int y=0; y<Velicina2048; y++) {for(int x=0; x<Velicina2048; x++) {CA(x*p+a+p*0.1,y*v+b+v*0.1,p*0.8,v*0.8,0xCDC1B4);if(Tabela2048[y][x]) {unsigned int o=0;switch(Tabela2048[y][x]) {case 2:o=0xEEE48A;break;case 4:o=0xEDE068;break;case 8:o=0xF2B169;break;case 16:o=0xF59563;break;case 32:o=0xF67C5F;break;case 64:o=0xF65E3B;break;case 128:o=0xEDCF73;break;case 256:o=0xEDCC61;break;case 512:o=0xEDC850;break;case 1024:o=0xEDC53F;break;default:o=0xEDC22E;break;}Co(x*p+a+p*0.1,y*v+b+v*0.1,p*0.8,v*0.8,o);if(Tabela2048[y][x]<10)Te(Tabela2048[y][x],x*p+a+p/2,y*v+b+v/2,0.4,0xffffff);else if(Tabela2048[y][x]<100)Te(Tabela2048[y][x],x*p+a+p/4*1.5,y*v+b+v/2,0.4,0xffffff);else if(Tabela2048[y][x]<1000)Te(Tabela2048[y][x],x*p+a+p/4,y*v+b+v/2,0.4,0xffffff);else Te(Tabela2048[y][x],x*p+a+p/8,y*v+b+v/2,0.4,0xffffff);}}}if(T==52)Kraj();} else if(T/10==6) {float a=40,b=25,p=2,v=2.5;Te(BrojBodova ,25,80,2,0xbbffbb+BrojBodova/10);Co(a-p,b-v,p*TetrisSirina+2*p,v*TetrisVisina+2*v,0x444A0);for (int y = 0; y < TetrisVisina; y++) {int z=TetrisVisina-y-1;for (int x = 0; x<TetrisSirina; x++) {if (tat[z][x]  ==  1)CA(x*p+a+p*0.05,y*v+b+v*0.05,p*0.9,v*0.9,0x555555);else if (tat[z][x]  ==  2)CA(x*p+a+p*0.05,y*v+b+v*0.05,p*0.9,v*0.9,0xff);else CA(x*p+a+p*0.05,y*v+b+v*0.05,p*0.9,v*0.9,0x0);}}a=20;b=50;Co(a,b,p*4+2*p,v*4+2*v,0x444A0+zadrzana*0x990000);for (int y = 0; y < 4; y++) {int z=3-y;for (int x = 0; x<4; x++) {if (zadrzana_figura[z][x]  ==  1)CA(x*p+a+p*1.05,y*v+b+v*1.05,p*0.9,v*0.9,0x555555);else if (zadrzana_figura[z][x]  ==  2)CA(x*p+a+p*1.05,y*v+b+v*1.05,p*0.9,v*0.9,0xff);else CA(x*p+a+p*1.05,y*v+b+v*1.05,p*0.9,v*0.9,0x0);}}if(T==62)Kraj();}if(T!=0) {if(MisUKvadratu(0,0,35,25,h)&&PritisnutTaster(6))T=0;TE("\\",3,3,3,0x00f000+0xf000f0*MisUKvadratu(0,0,35,25,h));}if(vreme_za_crtanje==0||aplikaciono_vreme==-1||CG) {if(aplikaciono_vreme==-1)aplikaciono_vreme=0;HDC dc=GetDC(h);SetDIBitsToDevice(dc, 0, 0, O, M, 0, 0, 0, M,ObojenEkran, &E, DIB_RGB_COLORS);ReleaseDC(h,dc);}}void InicijalizacijaSvihAplikacija() {VremePoGeneraciji=-1;BrojBodova=0;aplikaciono_vreme=0;InicijalizacijaZmije();postavihranu();ucitaj_minolovac();odrediBrojSusednihMina();Inicijalizacija_Konvejeve_Igre_Zivota();Inicijalizacija_Povezi4();inicijalizacija2048();InicijalizacijaTetrisa();}void LogikaIgre(HWND IdentifikatorProzora) {if(PritisnutTaster(14)) {T=T/10;T*=10;InicijalizacijaSvihAplikacija();}if(PritisnutTaster(15))T=0;if(T==0) {InicijalizacijaSvihAplikacija();} else if(T/10==1) {if(T%10==0) {if(PritisnutTaster(8)||PritisnutTaster(2)||PritisnutTaster(3)||PritisnutTaster(5)||PritisnutTaster(4)) {T+=1;if(PritisnutTaster(2))zS(2);else if(PritisnutTaster(3))zS(3);else if(PritisnutTaster(4))zS(1);else if(PritisnutTaster(5))zS(0);}} else if(T%10==1) {if(PritisnutTaster(2))zS(2);else if(PritisnutTaster(3))zS(3);else if(PritisnutTaster(4))zS(1);else if(PritisnutTaster(5))zS(0);aplikaciono_vreme+=vreme_po_kadru;if(aplikaciono_vreme>0.08-G(0,0.002*BrojBodova,0.055)) {aplikaciono_vreme=-1;if(!pomeri_zmiju())T=12;}}} else if(T/10==2) {if(PritisnutTaster(9)&&U!=-1&&T==21) {zastave[U/SirinaMiskogPolja][U%SirinaMiskogPolja]=!zastave[U/SirinaMiskogPolja][U%SirinaMiskogPolja];if(zastave[U/SirinaMiskogPolja][U%SirinaMiskogPolja])broj_zastava+=1;else broj_zastava-=1;}if(PritisnutTaster(6)&&U!=-1&&T!=22) {if(T==20) {pocetak_inicijalizacije:ucitaj_minolovac();postavi_vrednost_pritisnutog_polja(1);postaviMine();postavi_vrednost_pritisnutog_polja(0);odrediBrojSusednihMina();if(vrednost_pritisnutog_polja()>0)goto pocetak_inicijalizacije;T=21;BrojBodova=50+(BROJMINA/5*50);aplikaciono_vreme=0;}if(!zastave[U/SirinaMiskogPolja][U%SirinaMiskogPolja])OtvoriPolje(U % SirinaMiskogPolja, U / SirinaMiskogPolja);}aplikaciono_vreme+=vreme_po_kadru;if(T==21&&aplikaciono_vreme>1) {aplikaciono_vreme=-1;BrojBodova--;if(BrojBodova ==0)T=22;}} else if(T/10==3) {if(PritisnutTaster(6)&&U!=-1)svet[U/SirinaSveta][U%SirinaSveta]=svet[U/SirinaSveta][U%SirinaSveta]!=1;aplikaciono_vreme+=vreme_po_kadru;if(PritisnutTaster(8)||(aplikaciono_vreme>1.0/VremePoGeneraciji&&VremePoGeneraciji>0)) {aplikaciono_vreme=-1;sledeca_generacija();}} else if(T/10==4) {if(T<42) {if ((PritisnutTaster(4)||PritisnutTaster(10))&&brojpoteza -rezimIstorije>0)rezimIstorije++;if ((PritisnutTaster(11)||PritisnutTaster(5))&&rezimIstorije>0)rezimIstorije--;}if(PritisnutTaster(6)&&U!=-1) {ubaci_u_kolonu(U%KOL);if(proveri_pobedu())T=42;if(brojpoteza ==42&&T!=42) {T=43;Kraj();}igrac=igrac==1?2:1;}} else if(T/10==5) {if(PritisnutTaster(3)) pomeri_nagore();else if(PritisnutTaster(2)) pomeri_nadole();else if(PritisnutTaster(4))pomeri_ulevo();else if(PritisnutTaster(5))pomeri_udesno();if(!DaLiJeKraj2048()) {T=52;if(PritisnutTaster(9)) {inicijalizacija2048();T=50;BrojBodova =0;}}} else if(T/10==6) {if(T!=62) {if ((PritisnutTaster(4)||PritisnutTaster(10)) && !sudar(-1, 0)) xT--;if ((PritisnutTaster(11)||PritisnutTaster(5)) && !sudar(1, 0)) xT++;if ((PritisnutTaster(13)||PritisnutTaster(3)) && !sudar(0, 1)) {BrojBodova +=1;yT++;}if (PritisnutTaster(12)||PritisnutTaster(2)) rotiraj();if (PritisnutTaster(8)) spusti_odjednom();if (PritisnutTaster(16)) zadrzi_figuru();aplikaciono_vreme+=vreme_po_kadru;if(aplikaciono_vreme>1-tetris_ubrzanje) {aplikaciono_vreme=-1;if(tetris_ubrzanje<0.99)tetris_ubrzanje+=0.001;if (!sudar(0, 1)) {yT++;} else {stavi_na_tablu();obrisi_redove();xT = 3;yT = 0;kopiraj_oblik_u_trenutni(trenutni_oblik);if (sudar(0, 0))T=62;}}}osvezi_trenutni_oblik_u_tabli();}OsveziEkran(IdentifikatorProzora,0);}void oslobodimemoriju() {VirtualFree(ObojenEkran,0,MEM_RELEASE);}LRESULT CALLBACK WWW(HWND IdentifikatorProzora,UINT msg,WPARAM wParam,LPARAM lParam) {switch(msg) {case WM_ERASEBKGND:return TRUE;case WM_CLOSE:programRadi=0;DestroyWindow(IdentifikatorProzora);break;case WM_DESTROY:programRadi=0;oslobodimemoriju();break;case WM_SIZE: {RECT pR;GetClientRect(IdentifikatorProzora,&pR);O=pR.right-pR.left;M=pR.bottom-pR.top;int S=O*M*sizeof(unsigned int);if(ObojenEkran)VirtualFree(ObojenEkran,0,MEM_RELEASE);ObojenEkran=VirtualAlloc(0,S,MEM_COMMIT|MEM_RESERVE,PAGE_READWRITE);E.bmiHeader.biSize=sizeof(E.bmiHeader);E.bmiHeader.biWidth=O;E.bmiHeader.biHeight=M;E.bmiHeader.biPlanes=1;E.bmiHeader.biBitCount=32;E.bmiHeader.biCompression=BI_RGB;OsveziEkran(IdentifikatorProzora,1);}default:return DefWindowProc(IdentifikatorProzora,msg,wParam,lParam);}return 0;}void tp(int i,bool d) {stanjeTastera[i][1]=d!=stanjeTastera[i][0];stanjeTastera[i][0]=d;}void tv() {int i=0;while(i<BROJ_TASTERA) {stanjeTastera[i][1]=0;i++;}}int WINAPI WinMain(HINSTANCE hInstance,HINSTANCE hPrevInstance,LPSTR lpCmdLine,int nCmdShow) {WNDCLASSEX wc;HWND IdentifikatorProzora;wc.cbSize=sizeof(WNDCLASSEX);wc.style=CS_HREDRAW|CS_VREDRAW;wc.lpfnWndProc=WWW;wc.cbClsExtra=0;wc.cbWndExtra=0;wc.hInstance=hInstance;wc.hIcon=LoadIcon(NULL,IDI_APPLICATION);wc.hCursor=LoadCursor(NULL,IDC_ARROW);wc.hbrBackground=(HBRUSH)(COLOR_WINDOW+1);wc.lpszMenuName=NULL;wc.lpszClassName="a";wc.hIconSm=LoadIcon(NULL,IDI_APPLICATION);if(!RegisterClassEx(&wc)) {MessageBox(NULL,"ls","lose!",MB_ICONEXCLAMATION|MB_OK);return 0;}IdentifikatorProzora=CreateWindowEx(0,"a","Aieeeaoe?a aeoaaeiaiceiiaeieo aieeeaoe?a",WS_OVERLAPPEDWINDOW|WS_VISIBLE,CW_USEDEFAULT,CW_USEDEFAULT,240,120,NULL,NULL,hInstance,NULL);UpdateWindow(IdentifikatorProzora);QueryPerformanceCounter(&pocetak_kadra);double brzina_promene_kadra;{QueryPerformanceFrequency(&brzinaucitavanja);brzina_promene_kadra=(double)brzinaucitavanja.QuadPart;}unsigned int ui;{int i=0;while(i<BROJ_TASTERA) {stanjeTastera[i][0]=0;i++;}}int stariprozorX,stariprozorY,stariprozorSirina,stariprozorVisina;OsveziEkran(IdentifikatorProzora,1);bool CeoEkran=1;SetWindowPos(IdentifikatorProzora,NULL,GetSystemMetrics(SM_CXSCREEN)/4,GetSystemMetrics(SM_CYSCREEN)/8,GetSystemMetrics(SM_CXSCREEN)/2,GetSystemMetrics(SM_CYSCREEN)/8*6,SWP_SHOWWINDOW);RECT windowRect;GetWindowRect(IdentifikatorProzora,&windowRect);stariprozorX=windowRect.left;stariprozorY=windowRect.top;stariprozorSirina=windowRect.right-windowRect.left;stariprozorVisina=windowRect.bottom-windowRect.top;SetWindowLong(IdentifikatorProzora,GWL_STYLE,WS_POPUP|WS_VISIBLE);SetWindowPos(IdentifikatorProzora,HWND_TOP,0,0,GetSystemMetrics(SM_CXSCREEN),GetSystemMetrics(SM_CYSCREEN),SWP_SHOWWINDOW);srand(time(NULL));popuniDrugiJezik();while(programRadi) {tv();MSG WindowsPoruka;while(PeekMessage(&WindowsPoruka,IdentifikatorProzora,0,0,PM_REMOVE)) {switch(WindowsPoruka.message) {case WM_LBUTTONDOWN:stanjeTastera[6][1]=!stanjeTastera[6][0];stanjeTastera[6][0]=1;break;case WM_LBUTTONUP:stanjeTastera[6][1]=stanjeTastera[6][0];stanjeTastera[6][0]=0;break;case WM_RBUTTONDOWN:stanjeTastera[9][1]=!stanjeTastera[9][0];stanjeTastera[9][0]=1;break;case WM_RBUTTONUP:stanjeTastera[9][1]=stanjeTastera[9][0];stanjeTastera[9][0]=0;break;case WM_KEYUP:case WM_KEYDOWN: {bool d=(!(WindowsPoruka.lParam&(1<<31)));ui=(unsigned int)WindowsPoruka.wParam;if(ui==VK_ESCAPE)tp(0,d);if(ui==VK_F11)tp(1,d);if(ui==VK_UP)tp(2,d);if(ui==VK_DOWN)tp(3,d);if(ui==VK_LEFT)tp(4,d);if(ui==VK_RIGHT)tp(5,d);if(ui=='E')tp(7,d);if(ui==VK_SPACE)tp(8,d);if(ui=='R')tp(9,d);if(ui=='A')tp(10,d);if(ui=='D')tp(11,d);if(ui=='W')tp(12,d);if(ui=='S')tp(13,d);if(ui=='R')tp(14,d);if(ui=='N')tp(15,d);if(ui=='G')tp(16,d);}break;default: {DispatchMessage(&WindowsPoruka);}}}if(!programRadi)break;if(stanjeTastera[0][0])PostMessage(IdentifikatorProzora,WM_CLOSE,0,0);if(PritisnutTaster(1)) {if(!CeoEkran) {CeoEkran=1;RECT windowRect;GetWindowRect(IdentifikatorProzora,&windowRect);stariprozorX=windowRect.left;stariprozorY=windowRect.top;stariprozorSirina=windowRect.right-windowRect.left;stariprozorVisina=windowRect.bottom-windowRect.top;SetWindowLong(IdentifikatorProzora,GWL_STYLE,WS_POPUP|WS_VISIBLE);SetWindowPos(IdentifikatorProzora,HWND_TOP,0,0,GetSystemMetrics(SM_CXSCREEN),GetSystemMetrics(SM_CYSCREEN),SWP_SHOWWINDOW);} else {CeoEkran=0;SetWindowLong(IdentifikatorProzora,GWL_STYLE,WS_OVERLAPPEDWINDOW|WS_VISIBLE);SetWindowPos(IdentifikatorProzora,NULL,stariprozorX,stariprozorY,stariprozorSirina,stariprozorVisina,SWP_SHOWWINDOW);}}LogikaIgre(IdentifikatorProzora);vreme_za_crtanje+=vreme_po_kadru;if(vreme_po_kadru<0.016) {Sleep((DWORD)((0.016-vreme_po_kadru)*1000));vreme_za_crtanje=1;}QueryPerformanceCounter(&kraj_kadra);vreme_po_kadru=(double)(kraj_kadra.QuadPart-pocetak_kadra.QuadPart)/brzina_promene_kadra;pocetak_kadra=kraj_kadra;}oslobodimemoriju();}
